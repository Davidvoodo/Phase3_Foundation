name: CI/CD Pipeline

on:
  push:
    branches: [ main, devops/* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
jobs:
  # Build stage
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('app/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt
          pip install -r app/requirements-dev.txt

      - name: Build Docker image
        run: |
          docker build -t simple-flask-app:${{ matrix.python-version }} .

  # Test stage with matrix builds for pylint
  test:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        test-type: ['unit', 'lint']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('app/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements-dev.txt

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          cd app
          python -m pytest ../tests/ -v --tb=short

      - name: Run pylint
        if: matrix.test-type == 'lint'
        run: |
          cd app
          python -m pylint app.py --fail-under=8.0

  # Deploy stage
  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: simple-flask-app:latest
          outputs: type=docker,dest=/tmp/simple-flask-app.tar

      - name: Load Docker image
        run: |
          docker load --input /tmp/simple-flask-app.tar

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Validate Helm chart
        run: |
          helm lint ./mychart
          helm template simple-app ./mychart --dry-run

      - name: Package Helm chart
        run: |
          helm package ./mychart --destination ./charts/
          echo "Helm chart packaged successfully"

      - name: Simulate deployment
        run: |
          echo "=== Deployment Simulation ==="
          echo "Docker image: simple-flask-app:latest"
          echo "Helm chart: ./mychart"
          echo "Would run: helm upgrade --install simple-app ./mychart --namespace default"
          echo "Deployment simulation completed successfully"
